function onLoadInit() {
    searchKeyword.value = "", searchKeyword.style.borderColor = "#ddd", searchBtn.setAttribute("disabled", "disabled"), searchBtn.classList.add("btn-disabled")
}

function searchBoxAction(e) {
    null != e.target.value && "" != e.target.value ? (searchKeyword.style.borderColor = "#ddd", searchBtn.removeAttribute("disabled"), searchBtn.classList.remove("btn-disabled")) : (searchBtn.setAttribute("disabled", "disabled"), searchBtn.classList.add("btn-disabled"))
}
async function searchBookmarks() {
    let e = searchKeyword.value.trim();
    null != e && "" != e ? (result.innerHTML = initLoading(), await getSearchBookmarks(e).then(e => {
        infoText.innerHTML = "Getting your search bookmarks....", loadBookmarks(e, "search")
    }).catch(e => {
        loadErrors(e)
    })) : (searchKeyword.focus(), searchKeyword.style.borderColor = "red")
}
async function recentBookmarks() {
    result.innerHTML = initLoading(), onLoadInit(), await getRecentBookmarks().then(e => {
        infoText.innerHTML = "Getting your recent bookmarks....", loadBookmarks(e, "recent")
    }).catch(e => {
        loadErrors(e)
    })
}
async function allBookmarks() {
    result.innerHTML = initLoading(), onLoadInit(), await getAllBookmarks().then(e => {
        infoText.innerHTML = "Getting your all bookmarks....", loadBookmarks(e, "all")
    }).catch(e => {
        loadErrors(e)
    })
}

function fetchBookmarks(e) {
    e.forEach(function(e) {
        void 0 !== e.url && null !== e.url && bookmarObject.push({
            id: e.id,
            title: e.title,
            url: e.url,
            createdAt: formatDate(e.dateAdded)
        }), e.children && fetchBookmarks(e.children)
    })
}

function getAllBookmarks() {
    return new Promise((e, o) => {
        try {
            bookmarObject = new Array, chrome.bookmarks.getTree(function(o) {
                fetchBookmarks(o), e(JSON.stringify(bookmarObject))
            })
        } catch (e) {
            o("Something Went Wrong!! Please Try Again...")
        }
    })
}

function getRecentBookmarks() {
   

 return new Promise((e, o) => {
        try {
            let t = new Array;
            chrome.bookmarks.getRecent(100, o => {
                o.forEach(function(e) {
                    void 0 !== e.url && null !== e.url && t.push({
                        id: e.id,
                        title: e.title,
                        url: e.url,
                        createdAt: formatDate(e.dateAdded)
                    })
                }), e(JSON.stringify(t))
            })
        } catch (e) {
            o("Something Went Wrong!! Please Try Again...")
        }
    })
}

function getSearchBookmarks(e) {
    return new Promise((o, t) => {
        try {
            let n = new Array;
            chrome.bookmarks.search(e, e => {
                e.forEach(function(e) {
                    void 0 !== e.url && null !== e.url && n.push({
                        id: e.id,
                        title: e.title,
                        url: e.url,
                        createdAt: formatDate(e.dateAdded)
                    })
                }), o(JSON.stringify(n))
            })
        } catch (e) {
            t("Something Went Wrong!! Please Try Again...")
        }
    })
}

function removeBookmarkById(e) {
    return new Promise((o, t) => {
        try {
            chrome.bookmarks.remove(e), o(e)
        } catch (e) {
            t("Something Went Wrong!! Please Try Again...")
        }
    })
}

function formatDate(e) {
    return new Date(e).toISOString().slice(0, 10).replace(/-/g, "/")
}

function loadBookmarks(e, o = null) {
    result.innerHTML = initLoading(), e && setTimeout(() => {
        let t = JSON.parse(e);
        if ("search" == o && (t = t.reverse()), t.length && Object.keys(t)) {
            let e = "";
            t.map((o, t) => {
                e += `<tr class="bookmark-row" id="bookmarkRow${t}">\n                        <td>\n                            <span class="bookmark-title">${o.title}</span><br/>\n                            <a href="${o.url}" class="bookmark-link" target="_blank">${o.url}</a>\n                            <a href="#" class="remove-btn remove-bookmark-btn" id="removeBookmark_${t}" data-bookmark-id="${o.id}">${removeSvg}</a>\n                        </td>\n                        <td><span class="bookmark-date">${o.createdAt}</span></td>\n                    </tr>`
            }), result.innerHTML = e, infoText.innerHTML = "", "recent" == o && (infoText.innerHTML = `Recent ${t.length} Bookmarks`), "all" == o && (infoText.innerHTML = `Your all Bookmarks - ${t.length}`), "search" == o && (infoText.innerHTML = `Found - ${t.length} Bookmarks`)
        } else noRecordsFound(), infoText.innerHTML = `Found - ${t.length} Bookmarks`
    }, 3e3)
}

function loadErrors(e) {
    result.innerHTML = initLoading(), e && setTimeout(() => {
        result.innerHTML = `<tr><td colspan="2"><span class="error-msg">${e}</span></td></tr>`
    }, 2e3)
}

function noRecordsFound() {
    result.innerHTML = '<tr><td colspan="2">Oops! I\'m very Sorry, No Bookmarks Found.</td></tr>'
}
async function removeBookmark(e, o) {
    await removeBookmarkById(o).then(t => {
        o == t && (document.getElementById("bookmarkRow" + e).remove(), infoText.innerHTML = `<span style="color: red;">Bookmark Id - ${t} has been deleted</span>`)
    }).catch(e => {
        loadErrors(e)
    })
}

function removeLoading(e) {
    document.getElementById("bookmarkRow" + e).innerHTML = `<td colspan="2">${rowLoadingPlaceholder()}</td>`
}
async function downloadAsCsv(e) {
    e.preventDefault(), infoText.innerHTML = "Start downloading...", await getAllBookmarks().then(e => {
        createCsv(e)
    }).catch(e => {
        loadErrors(e)
    })
}

function createCsv(e) {
    const o = JSON.parse(e);
    if (o.length) {
        const e = Object.keys(o[0]).toString(),
            t = o.map(e => Object.values(e).toString()),
            n = [e, ...t].join("\n");
        startCsvDownload(n, o.length)
    }
}

function startCsvDownload(e, o = 0) {
  
Date.prototype.yyyymmddhhmmss = function() {   
   var yyyymmddhhmm = this.yyyymmddhhmm();   
   var ss = this.getSeconds() < 10 ? "0" + this.getSeconds() : this.getSeconds();   
   return ""
     .concat(yyyymmddhhmm).concat(ss); };  var d = new Date();
      




  const t = new Blob([e], {
            type: "application/json"
        }),
        n = URL.createObjectURL(t),
        r = document.createElement("a");
    r.download = "Bookmarks_Backup-ByS!D!M@D-" + d + ".json", r.href = n, r.style.display = "none", document.body.appendChild(r), r.click(), r.remove(), URL.revokeObjectURL(n), infoText.innerHTML = `${o} - Bookmarks Has Been Backed up as CSV`
}

function displayPlaceholder() {
    return '<div class="ph-item">\n        <div class="ph-col-12">\n            <div class="ph-row">\n                <div class="ph-col-6"></div>\n                <div class="ph-col-6 empty"></div>\n                <div class="ph-col-4"></div>\n                <div class="ph-col-8 empty"></div>\n                <div class="ph-col-6"></div>\n                <div class="ph-col-6 empty"></div>\n                <div class="ph-col-12"></div>\n            </div>\n        </div>\n    </div>'
}

function rowLoadingPlaceholder() {
    return '<div class="ph-item tr-loading-placeholder">\n        <div class="ph-col-12">\n            <div class="ph-row">\n                <div class="ph-col-6"></div>\n                <div class="ph-col-6 empty"></div>\n                <div class="ph-col-12"></div>\n            </div>\n        </div>\n    </div>'
}

function initLoading() {
    return `<tr><td colspan="2">${displayPlaceholder()}</td></tr>\n        <tr><td colspan="2">${displayPlaceholder()}</td></tr>`
}
const allBtn = document.querySelector("#allBtn"),
    searchBtn = document.querySelector("#searchBtn"),
    recentBtn = document.querySelector("#recentBtn"),
    result = document.querySelector("#result"),
    downloadBtn = document.querySelector("#downloadBookmarkCsv"),
    searchKeyword = document.querySelector("#searchTxtb"),
    infoText = document.querySelector("#infoHolder"),
    removeSvg = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#f10101" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>';
var bookmarObject = new Array;
recentBtn.addEventListener("click", recentBookmarks), allBtn.addEventListener("click", allBookmarks), searchBtn.addEventListener("click", searchBookmarks), searchKeyword.addEventListener("keyup", searchBoxAction), downloadBtn.addEventListener("click", downloadAsCsv), window.addEventListener("DOMContentLoaded", async () => {
    result.innerHTML = initLoading(), onLoadInit(), recentBookmarks()
}), document.querySelector("body").addEventListener("click", function(e) {
    const o = e.target.tagName.toLowerCase(),
        t = e.target.parentNode,
        n = t.tagName.toLowerCase();
    if ("svg" === o && "a" === n) {
        const e = t.classList.value.split(" ");
        if (e.includes("remove-bookmark-btn") && confirm("Are you want to delete?")) {
            const e = t.id;
            if (e) {
                const o = e.split("_")[1],
                    n = t.getAttribute("data-bookmark-id");
                o && n && (infoText.innerHTML = "Bookmark deleting...", removeLoading(o), setTimeout(() => {
                    removeBookmark(o, n)
                }, 2e3))
            }
        }
    }
});